#include <iostream>
using namespace std;
int main()
{
	int i, k, j;//중첩 for문에서 사용하기 위해 변수선언을 한다.
	int a, b;//만들고 싶은 모양과 행의 개수를 받기 위해 변수선언을 한다.

	do 
	{//조건에 맞지 않아도 일단 무조건 한 번은 반복해야될 문장이 있기 때문에 'do while'문을 사용한다.
		cout << "--------별 찍기 시스템--------" << endl;
		cout << "만들고 싶은 모양을 선택해주세요." << endl;
		cout << "1. 직각삼각형" << endl;
		cout << "2. 정삼각형" << endl;
		cout << "3. 나비" << endl;
		cout << "4. 나가기" << endl;
		cin >> a;
		cout << endl;

		
		switch (a)
		{// 각 번호에 따라서 수행해야 될 문장들이 다르므로 'switch case'문을 사용한다
		case 1: //1번을 선택했을 때
		{
			cout << "직각삼각형을 선택하셨습니다" << endl;
			cout << "행의 개수를 선택해주세요" << endl;
			cin >> b;
			cout << endl;
			for (i = 1; i <= b; i++)//행의 개수만큼 반복되는 for문/ 즉, 줄바꿈을 위해 사용하는 for문이다
			{
				for (j = b+1; j > i; j--)//오른쪽 직각삼각형을 위해서는 먼저 공백이 찍혀야 한다. 아래로 내려갈 수록 공백이 찍히는 칸 수는 b에서 1까지 줄어든다.
				{
					cout << " ";
				}
				for (k = 1; k <= i; k++)//공백이 찍힌 후 남은 칸 수만큼 '*'이 찍힌다. 아래로 내려갈 수록 '*'이 찍히는 칸 수는 1에서 b까지 증가한다.
				{
					cout << "*";
				}
				cout<<endl;//안쪽 for문이 다 실행되면 바깥쪽 for문이 실행되기 전에 줄을 바꿔준다.
			}
			cout << endl;
			cout << endl;

			for (i = 1; i <= b; i++)//왼쪽 직각삼각형이므로 별만 찍히면 된다. 바깥쪽 for문으로서 줄 바꿈을 위한 것이다. 
			{
				for (j = b; j >= i; j--)//줄이 내려갈 수록 찍히는 별의 개수가 b에서 1까지 줄어든다.
				{
					cout << "*";
				}
				cout << endl;//줄을 바꿔준다.
			}
			cout << endl;
			cout << endl;

			for ( i = 1; i <= b; i++)//줄을 바꾸는데 사용되는 for문이다
			{
				for (j = 1; j < i; j++)//오른쪽 직각삼각형으므로 공백이 찍혀야 한다. 아래로 내려갈 수록 공백이 찍히는 칸 수는 0에서 b-1칸까지 증가한다.
				{
					cout << " ";
				}
				for (k = b; k >= i; k--)//아래로 내려갈수록 별이 찍히는 칸 수는 b에서 1까지 줄어든다.
				{
					cout << '*';
				}
				cout << endl;//줄을 바꿔준다.
			}
			cout << endl;
		}break;//아래의 출력문장들이 나오지 않게 하기위해 실행문을 빠져나가게 해준다. 즉 switch-case문을 빠져나가게 된다.
		case 2: //2번을 선택했을 때
		{
			cout << "정삼각형을 선택하셨습니다." << endl;
			cout << "행의 개수를 선택해주세요." << endl;
			cin >> b;
			cout << endl;

			for (i = 1; i <= b; i++)//줄이 바꿔지는 것을 반복해주는 for문이다.(행의 개수만큼 반복!)
			{
				for (j = b; j > i; j--)//정삼각형을 만들기 위해서는 공백을 찍은 후에 별을 찍어야한다. 맨 위에 찍힌 별 하나를 중심으로 생각해보면 공백은 왼쪽 직각삼각형의 모양으로 b-1에서 0까지 줄어든다.
				{
					cout << " ";
				}
				for (k = 1; k < 2 * i; k++)//별이 찍히는 칸 수는 증가한다. 이때 한 행마다 찍히는 별의 개수는 2*(행의 숫자)-1이므로 조건식을 다음과 같이 둔다.
				{
					cout << '*';

				}
				cout << endl;//줄을 바꿔준다.
			}
			cout << endl;
		}break;// 아래의 출력문장들이 나오지 않게 하기위해 실행문을 빠져나가게 해준다. 즉 switch-case문을 빠져나가게 된다.

		case 3: //3번을 선택했을 때
		{
			cout << "나비를 선택하셨습니다." << endl;
			while (1) //무한반복문이다. 홀수를 입력하지 않으면 홀수를 입력할 때까지 아래의 문장을 반복하기 위해 사용했다.
			{
				cout << "홀수를 입력해주세요: ";
				cin >> b;

				if (b % 2 == 0)//짝수를 입력했다면 아래의 문장들을 건너뛰고 다시 위로 올려가서 반복문을 다시 수행한다.
					continue;
				else//홀수를 입력했다면 무한반복문에서 빠져나와서 밑의 내용을 실행시킨다.
					break;
			}//홀수만 입력받기 때문에 나는 3부분으로 나누어서 나비모양을 만들기로 했다.

			for (i = 1; i <= b / 2; i++)//1번째 부분은 입력받은 홀수를 2로 나눴을 때의 몫의 값을 가진 행까지 실행되는 반복문이다.
			{

				for (j = 1; j <= i; j++)//가로로 행을 분석했을 때 별-공백-별의 순서로 찍혀야 한다. 또한 대칭적으로 1행부터 b/2행까지 행의 숫자만큼 찍힌다.
				{
					cout << '*';
				}
				for (k = 1; k <= b - i * 2; k++)//별이 대칭적으로 찍히므로 한 행마다 찍힐 수 있는 칸 수에서  한 쪽에서 별이 찍힌 개수를 2배로 곱하여 뺸만큼 공백이 찍힌다.
				{
					cout << " ";
				}
				for (j = 1; j <= i; j++)//대칭적으로 별이 출력되어야 하므로 위에 쓴 for문을 그대로 사용해도 된다.
				{
					cout << '*';
				}
				cout << endl;//줄을 바꿔준다
			}

			for (j= 1; j<= b; j++)// 2번째 부분으로서 홀수로 찍힌 행에서 중간에 있는 줄은 공백없이 입력받은 수만큼 별이 찍혀야 한다.
			{
				cout << '*';
			}
			cout << endl;
			for (i = b / 2; i >=1; i--) //3번째 부분은 b/2+1 행부터 b행까지 반복된다.
			{
				for (j = 1; j <= i; j++)//행을 가로로 봤을 때 별-공백-별의 순서로 출력되는 것은 위와 같다. 따라서 3번째 부분의 안쪽 for문은 1번째 부분에서 쓴 안쪽 for문과 같은 형태를 띄운다.
				{
					cout << '*';
				}
				for (k = 1; k <= b - i * 2; k++)
				{
					cout << " ";
				}
				for (j = 1; j <= i; j++)
				{
					cout << '*';
				}
				cout << endl;//줄을 바꿔준다.
			}
			cout << endl;
			break; //아래의 출력문장들이 나오지 않게 하기위해 실행문을 빠져나가게 해준다.즉 switch - case문을 빠져나가게 된다.
		}

		case 4: //4번을 선택했을 때
		{
			cout << "나가기를 선택하셨습니다" << endl;
			cout << "감사합니다"<< endl;
		}
			break;
		default:// 1,2,3,4번 이외에 번호를 입력했을 때 실행된다.
				cout << "잘못 입력하셨습니다 다시 번호를 선택해주세요" << endl;
		}
			
	}while (a != 4);// 4번 '나가기'를 누르지 않은 이상 반복한다.즉, 4번을 누르면 멈춘다.
}