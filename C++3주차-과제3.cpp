#include<iostream>
#include<string>
using namespace std;

void print(int *arr) // 숫자를 한 줄에 하나씩 출력하기 위해 만든 함수이다.
{
	for (int i = 0; i < 5; i++) //  다섯개의 숫자를 입력받을 것이니 for반복문을 사용하여 5번 출력한다.
		cout << i + 1 << ".  " << arr[i] << endl; //인덱스는 0부터 시작하므로  첫번째 줄부터 5번째 줄로 표현하기 위해 i+1로 표현한다.
}

void swap(int *a, int *b)//과제 2에서 사용했던 코드를 가져왔다. 두 수씩 비교하면서 앞에 있는 숫자가 뒤에 있는 숫자보다 클 경우 자리를 앞뒤로 바꿔주기 위해 사용된다.
{
	int c; // 두 수의 값을 교환하기 위한 변수이다. 단지 a=b; b=a; 라고 코드를 작성하게 된다면 a와 b가 값이 바뀌는 것이 아니라 같아진다. 따라서 임의의 변수가 필요하다.
	c = *a;// sort 함수에서 변수 arr[k-1]의 지정된 주소에 있는 값을 c에 대입한다.
	*a = *b;// sort 함수에서 변수 arr[k]의 값을 변수 arr[k-1]의 주소에 접근하여 값에 대입한다.
	*b = c;//sort함수에서 변수 c(=arr[k-1])의 값을 변수 arr[k]의 값에 대입한다.
}

void sort(int *arr) //마찬가지로 반환하는 값이 없으므로 void를 사용한다. 오름차순으로 정리하기 위하여 나는 버블정렬의 방법을 사용하려고 한다. 즉 연속된 두 개의 인덱스의 값을 반복적으로 비교하여 정렬하는 방법이다. 
{
	for (int i = 0; i < 5; i++)//한 바퀴돌때마다 큰값부터 하나하나씩 자리가 정해지기 때문에 전체 배열의 크기만큼(5번) 반복해야 전체정렬이 완료된다.
	{
		for (int k = 1; k < 5; k++)// 인덱스 0과 1, 1과2, 2와 3, 3과4의 값을 비교한다. 앞자리에 있는 인덱스의 값이  뒷자리에 있는 인덱스의 값보다 크면 자리를 바꿔주고 그렇지 않으면 자리를 바꾸지 않은 상태로 다음 연속된 두 배열값들을 비교한다.
		{

			if (arr[k - 1] > arr[k]) //"만약 앞자리에 있는 숫자가 뒷자리에 있는 숫자보다 크다면" 이라는 조건을 준다. 
			{
				swap(&arr[k - 1], &arr[k]);// 앞 뒤에 있는 숫자의 자리를 바꿔준다. print함수처럼 인자를 배열의 변수로 선언한다면 '&'을 붙이지 않지만 배열의 인덱스를 인자로 사용할 경우 '&'을 사용해야 한다.
			}
		}
	}
}

int main()
{ 

		int arr[5];// 배열을 사용하여 5개의 숫자를 입력받는다
		cout << "숫자 다섯 개를 입력해주세요 (띄어쓰기로 구분) >> ";

		for (int i = 0; i < 5; i++) // 반복문을 사용하여 입력받는 5개의 숫자를 인덱스 0부터 차곡차곡 대입한다.
		{
			cin >> arr[i];
		}

		cout << endl;
		cout << "<정렬 전>" << endl;
		cout << endl;

		print(arr); // print함수를 사용하여 출력한다. 이때 arr앞에 '&'을 붙이지 않는 것은 arr=&arr[0]을 뜻하기 때문이다. 즉 이미 주소를 의미하고 있기 때문에 '&'을 사용하지 않고 주소에 의한 호출이 가능하다.
		cout << endl;

		cout << "<정렬 후>" << endl;
		cout << endl;

		sort(arr);// sort함수를 사용하여 숫자를 오름차순으로 정렬한다.
		print(arr);//오름차순으로 정렬한 배열을 출력한다.
}